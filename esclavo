//Código para el Proyecto número 2 de Electrónica Digital 1 - Universidad del Valle de Guatemala
//Julio Roberto Pérez Díaz 221023, José Andrés García Salas Hurtarte (22985)
//Código del Arduino Esclavo
//Monitor de Signos Vitales del corazón con conexión serial entre dos arduinos

//Librería para controlar el motor Servo
#include <Servo.h>

//Definición del nombre de los servos utilizados
Servo servo;
Servo servo2;

// Definición de la secuencia de movimientos para la bandera roja
int secuencia[] = {45, 135, 45, 135, 45, 0};
// Definición de la secuencia de movimientos para la bandera verde
int secuencia2[] = {0, 90, 0};


  const long interval = 2000;  // interval at which to blink (milliseconds)
  unsigned long previousMillis = 0;
  
 

void setup() {
//Se definen los pines que manejan la señal de los servo;
  servo.attach(2); 
  servo2.attach(3);

//Pines de salidas del esclavo en base a la comunicación Serial
  pinMode (7, OUTPUT);
  pinMode (6, OUTPUT);
  pinMode (5, OUTPUT);
  pinMode (4, OUTPUT);
  pinMode (A0, OUTPUT);
  pinMode (A1, OUTPUT);
  pinMode (A2, OUTPUT);

//Definición de Serial para la comunicación entre arduinos
  Serial.begin(9600);

  
}

void loop() { //Aquí comienzan las transiciones de estado
  while  (true) { //Lazo infinito
//Definición de los servos en cero grados
servo.write(0);
servo2.write(0);
//Lectura de Serial de entrada de comunicación con el arduino maestro para definir las posibles salidas. 

if (Serial.available()) {
//Asignación del valor de lectura a una nueva variable 
      char data_rcvd = Serial.read();
		Serial.println(data_rcvd);
//Definición de los estados en los que se obtuvo una medición no saludable 
        if (data_rcvd == '3') 
        {
//Se enciende una LED para indicar alerta 
        digitalWrite(7,HIGH);
        delay(2000);
        digitalWrite(7,LOW);
//Movimiento del motor Servo que controla la bandera roja 
        for (int i = 0; i <= 5; i++) {
        int angulo = secuencia[i];
        servo.write(angulo);
   		  delay(500); // Espera medio segundo antes de pasar al siguiente movimiento
        }
        }

        else if (data_rcvd == '2')
        {
//Se enciende una LED para indicar alerta 
        digitalWrite (6,HIGH);
        delay(2000);
        digitalWrite(6,LOW);
//Movimiento del motor Servo que controla la bandera roja 
        for (int i = 0; i <= 5; i++) {
        int angulo = secuencia[i];
        servo.write(angulo);
        delay(500); // Espera medio segundo antes de pasar al siguiente movimiento
        }
        }
        else if (data_rcvd == '1')
        {
//Se enciende una LED para indicar alerta 
        digitalWrite(5,HIGH);
        delay(2000);
        digitalWrite(5,LOW);
//Movimiento del motor Servo que controla la bandera roja 
        for (int i = 0; i <= 5; i++) {
        int angulo = secuencia[i];
        servo.write(angulo);
        delay(500); // Espera medio segundo antes de pasar al siguiente movimiento
        }
        }
        else if (data_rcvd == '0')
        {
//Se enciende una LED para indicar alerta 
        digitalWrite(4,HIGH);
        delay(2000);
        digitalWrite(4,LOW);
//Movimiento del motor Servo que controla la bandera roja 
        for (int i = 0; i <= 5; i++) {
        int angulo = secuencia[i];
        servo.write(angulo);
        delay(500); // Espera medio segundo antes de pasar al siguiente movimiento
        }
        }
        else if (data_rcvd == '9')
        {
//Movimiento del motor Servo que controla la bandera verde
        for (int u = 0; u <= 2; u++) {
        int angulo = secuencia2[u];
        servo2.write(angulo);
        delay(500); // Espera medio segundo antes de pasar al siguiente movimiento
        }
//Código para encender la LED RGB
        digitalWrite(A1, HIGH);
        digitalWrite(A2, HIGH);
        digitalWrite(A0, LOW);
        delay(500);

        digitalWrite(A0, HIGH);
        digitalWrite(A2, HIGH);
        digitalWrite(A1, LOW);
        delay(500);

        digitalWrite(A0, HIGH);
        digitalWrite(A1, HIGH);
        digitalWrite(A2, LOW);
        delay(500);
        
        digitalWrite(A0, LOW);
        digitalWrite(A1, LOW);
        digitalWrite(A2, LOW);
        delay(500);
        }
//Actualización de estado 
  unsigned long currentMillis = millis();
if (currentMillis - previousMillis >=
interval) {
previousMillis = currentMillis;
}
  }
  }
}
